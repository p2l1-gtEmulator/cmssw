library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

use work.emp_data_types.all;
use work.emp_project_decl.all;

use work.emp_device_decl.all;
use work.emp_ttc_decl.all;

use work.common_pkg.all;
use work.object_defs.all;

entity algos_slr{{slrnumber}} is
  port (
    clk_algo            : in  std_logic;
    rst_algo            : in  std_logic;
    clk40               : in  std_logic;
    rst40               : in  std_logic;
    objects_valid       : in  std_logic;
    objects             : in  t_obj_vector(NUM_OBJ_TYPES - 1 downto 0);
    algo_bits_valid_out : out std_logic;
    algo_bits_out       : out std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0)
  );

end algos_slr{{slrnumber}};

architecture rtl of algos_slr{{slrnumber}} is
  signal algo_bits_int : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0) := (others => '0');
  signal algo_bits_srl1_int : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0);
  signal algo_bits_srl2_int : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0);

  signal delayed_valid_buffer : std_logic_vector (ALGO_LATENCY - 1 + 2 downto 0); -- +2 for "reg_outputs" stage
  -------- SIGNALS ---------
  {% for key,value in filtermodules.items() %}
  signal {{key}} : std_logic := '0';
  {% for val in value.Paths %}
  signal {{val}} : std_logic := '0';
  {% endfor %}
  {% endfor %}
  -------- SIGNALS end ---------

begin
  process (clk_algo)
  begin
    if rising_edge(clk_algo) then
      delayed_valid_buffer <= delayed_valid_buffer(delayed_valid_buffer'high - 1 downto 0) & objects_valid;
    end if;
  end process;

  -------- ALGORITHMS ---------- 
  {{Conditions | indent(2)}}
  -------- ALGORITHMS end ---------- 



    
  -------- ASSOCIATE PATHS WITH CONDDITIONS  --------
  {% for key,value in filtermodules.items() %}
  {% for val in value.Paths %}
  {{val}} <= {{key}};
  {% endfor %}
  {% endfor %}


  -------- ASSOCIATE PATHS WITH Conditions  end --------



  -------- OUTPUT ALGO BITS --------
  reg_outputs : process (clk_algo) -- Register on algo clk for one BX
  begin
    if rising_edge(clk_algo) then
      {% for key,value in algobits.items() %}
      {% for values in filtermodules.values() %}
      {% for val in values.Paths %}
      {%if val == value %}
      algo_bits_int({{key}}) <= {{value}};
      {% endif %}
      {% endfor %}
      {% endfor %}
      {% if value in logicalcomb.keys() %}
      algo_bits_int({{key}}) <= {{logicalcomb[value].expression}};
      {% endif %}
      {% endfor %}

      algo_bits_out <= algo_bits_int;
    end if;
  end process;

  -------- OUTPUT ALGO BITS end--------
  algo_bits_valid_out <= delayed_valid_buffer(delayed_valid_buffer'high);

end rtl;

